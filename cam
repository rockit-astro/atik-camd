#!/usr/bin/env python3.6
#
# This file is part of atik-camd.
#
# atik-camd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# atik-camd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with atik-camd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for managing one of the cameras"""

# pylint: disable=invalid-name
# pylint: disable=broad-except

import os
import sys
import time
import Pyro4
from warwick.observatory.common import daemons, TFmt
from warwick.swasp.atik import CommandStatus, CameraStatus

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

DAEMONS = {
    'test': daemons.localhost_test,
}


def run_command(daemon, command, args):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command(daemon, args)
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop(daemon, args)

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret != -1 and ret != 0:
        print(CommandStatus.message(ret))
    elif ret != -1 and ret != 0:
        print('Returned unknown status code: {0}'.format(ret))
    return ret


def status(daemon, _):
    """Reports the current camera status"""
    with daemon.connect() as camd:
        data = camd.report_status()

    state_desc = CameraStatus.label(data['state'])
    if data['state'] == CameraStatus.Acquiring:
        progress = '{:.1f} / {:.1f}s'.format(data['exposure_progress'], data['exposure_time'])
        state_desc += ' (' + TFmt.Bold + progress + TFmt.Clear + ')'

    if 'sequence_overlapped' in data and data['sequence_overlapped']:
        state_desc += TFmt.Bold + ' OVERLAPPED' + TFmt.Clear

    # Camera is disabled
    print('   Camera is {}'.format(state_desc))
    if data['state'] != CameraStatus.Disabled:
        if data['state'] > CameraStatus.Idle:
            if data['sequence_frame_limit'] > 0:
                print('   Acquiring frame ' + TFmt.Bold + str(data['sequence_frame_count'] + 1) +
                      ' / ' + str(data['sequence_frame_limit']) + TFmt.Clear)
            else:
                print('   Acquiring ' + TFmt.Bold + 'UNTIL STOPPED' + TFmt.Clear)

        temperature_fmt = TFmt.Bold + TFmt.Red
        if data['temperature_locked']:
            temperature_status = ' (' + TFmt.Bold + TFmt.Green + 'LOCKED' + TFmt.Clear + ')'
            temperature_fmt = TFmt.Bold + TFmt.Green
        elif data['target_temperature'] is not None:
            temperature_status = ' (' + TFmt.Bold + 'LOCKING ON {:.0f}\u00B0C'.format(
                data['target_temperature']) + TFmt.Clear + ')'
        else:
            temperature_status = ''

        print('   Temperature is ' + temperature_fmt + '{:.0f}'.format(data['temperature']) + \
              '\u00B0C' + TFmt.Clear + temperature_status)

        cooler_fmt = TFmt.Bold
        if data['cooler_enabled']:
            cooler_fmt += 'ENABLED ({}% power)'.format(data['cooler_power'])
        else:
            cooler_fmt += TFmt.Red + 'DISABLED'

        print('   Cooler is ' + cooler_fmt + TFmt.Clear)
        exposure_label = TFmt.Bold + '{:.3f} s'.format(data['exposure_time']) + TFmt.Clear

        print('   Exposure time is ' + exposure_label)

    return 0


def set_temperature(daemon, args):
    """Set the camera temperature"""
    if len(args) == 1:
        if args[0] == 'warm':
            temp = None
        else:
            temp = int(args[0])
        with daemon.connect() as camd:
            return camd.set_target_temperature(temp)
    print('usage: {} [{}] temperature <degrees>'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def set_exposure(daemon, args):
    """Set the camera exposure time"""
    if len(args) == 1:
        exposure = float(args[0])
        with daemon.connect() as camd:
            return camd.set_exposure(exposure)
    print('usage: {} [{}] exposure <seconds>'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def set_exposure_delay(daemon, args):
    """Set the camera pre-exposure delay"""
    if len(args) == 1:
        delay = float(args[0])
        with daemon.connect() as camd:
            return camd.set_exposure_delay(delay)
    print('usage: {} [{}] delay <seconds>'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def set_shutter(daemon, args):
    """Set the camera shutter mode"""
    if len(args) == 1 and (args[0] == 'auto' or args[0] == 'dark'):
        enabled = args[0] == 'auto'
        with daemon.connect() as camd:
            return camd.set_shutter(enabled)
    print('usage: {} [{}] shutter [auto|dark]'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def set_window(daemon, args):
    """Set the camera readout window"""
    window = None
    if len(args) == 4:
        window = [
            int(args[0]),
            int(args[1]),
            int(args[2]),
            int(args[3])
        ]

    if window or (len(args) == 1 and args[0] == 'default'):
        with daemon.connect() as camd:
            return camd.set_window(window)

    print('usage: {} [{}] window (<x1> <x2> <y1> <y2>|default)'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def start(daemon, args):
    """Starts an exposure sequence"""
    if len(args) == 1:
        try:
            count = 0 if args[0] == 'continuous' else int(args[0])
            if args[0] == 'continuous' or count > 0:
                with daemon.connect() as camd:
                    return camd.start_sequence(count)
        except Exception:
            print('error: invalid exposure count:', args[0])
            return -1
    print('usage: {} [{}] start (continuous|<count>)'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    return -1


def stop(daemon, _):
    """Stops any active camera exposures"""
    with daemon.connect() as camd:
        return camd.stop_sequence()


def initialize(daemon, _):
    """Enables the camera driver"""
    # Initialization can take more than 5 sec, so bump timeout to 10.
    with daemon.connect(10) as camd:
        return camd.initialize()


def shutdown(daemon, _):
    """Disables the camera drivers"""
    with daemon.connect() as camd:
        return camd.shutdown()


def reboot(daemon, _):
    """Reboots the camera driver"""
    shutdown(daemon, _)
    time.sleep(5)
    return initialize(daemon, _)


def print_usage():
    """Prints the utility help"""
    print('usage: {} [{}] <command> [<args>]'.format(SCRIPT_NAME, '|'.join(DAEMONS)))
    print()
    print('general commands:')
    print('   status       print a human-readable summary of the camera status')
    print('   exposure     set exposure time in seconds')
    print('   delay        set pre-exposure delay in seconds')
    print('   shutter      set shutter mode')
    print('   window       set readout geometry')
    print('   start        start an exposure sequence')
    print()
    print('engineering commands:')
    print('   init         initialize the camera driver')
    print('   temperature  set target temperature and enable cooling')
    print('   kill         disconnect from camera driver')
    print('   reboot       kill and reinitialize the camera driver')
    print()

    return 0


if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.exit(print_usage())

    commands = {
        'temperature': set_temperature,
        'exposure': set_exposure,
        'delay': set_exposure_delay,
        'shutter': set_shutter,
        'window': set_window,
        'status': status,
        'start': start,
        'stop': stop,
        'init': initialize,
        'kill': shutdown,
        'reboot': reboot
    }

    if sys.argv[1] not in DAEMONS or sys.argv[2] not in commands:
        sys.exit(print_usage())

    sys.exit(run_command(DAEMONS[sys.argv[1]], commands[sys.argv[2]], sys.argv[3:]))
